#! /usr/bin/env python3
import os
import sys
import yaml
import git

temp_dir = "/tmp"
target_dir = "ci"
config_file="pipeline.yml"
data=""


#criar diretorio temporario e limpar se necessario

# conferir
pipeline_name=sys.argv[1]
repo_address=sys.argv[2]

#def check_arguments() :
#Checa se os dois argumentos da linha de comando existem e sao validos

#erro se o arquivo nao existir
def load_config(filename):
  file = open(filename, "r")
  return yaml.safe_load(file) #a variavel precisa ser publica se nao so funciona dentro do metodo. 


#erro se algo der errado.
def clone_repo(address, directory):
  try:
    git.Git(directory).clone(address, target_dir) 
    print("Repositorio clonado")
  except:
    pass

# erro se o passo nao existir na task
def do_step(step_name):
  for task in data['tasks']:
    if step_name in task:
# Deveria ser um sys.exec
      print(task[step_name])
    else:
      print("Task unknown")




def run_pipeline(pipeline_name):
  global data  
  print(data)
  for pipeline in data['pipelines']:
    print("pipeline = " + pipeline)
    if pipeline['name'] == pipeline_name:
      for step in pipeline['tasks']:
        print(step)
        do_step(step)

def main():
  try:
    #Check_arguments
    print("Antes de clonar")
    print(repo_address + temp_dir)
    clone_repo(repo_address, temp_dir)
    print("depois de clonar")
    print("Antes de carregar o yaml")
    data = load_config(temp_dir + "/" + target_dir + "/" + config_file) 
    print("depois de carregar o yaml")
    print(data)
    print("antes de rodar a pipeline")
    run_pipeline(pipeline_name)
    print("depois de rodar a pipeline")
  except:
    print("erro")

main()

